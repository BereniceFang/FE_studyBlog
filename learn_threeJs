# three.js 入门
1. 初始3D http://arodic.github.io/p/jellyfish/
2. WebGL是一项利用JavaScript API渲染交互式3D电脑图形和2D图形的技术，可兼容任何的网页浏览器，无需加装插件。通过WebGL的技术，只需要编写网页代码即可实现3D图像的展示。 
3. 可以把 WebGL 简单地认为是一种网络标准，定义了一些较底层的图形接口，简单来说，WebGL就是在浏览器中实现三维效果的一套规范。
4. 使用WebGL原生的API来写3D程序是一件非常痛苦的事情，幸好，有很多同行花业余时间写了一些WebGL开源框架，其中three.js就是非常优秀的一个。
5. 什么是threejs？Three.js 是一个 3D JavaScript 库。three表示3D的意思，js表示javascript的意思。那么合起来，three.js就是使用javascript 来写3D程序的意思。Javascript是运行在网页端的脚本语言，那么毫无疑问Three.js也是运行在浏览器上的。
6. Threejs能做什么？Three.js 封装了底层的图形接口，使得程序员能够在无需掌握繁冗的图形学知识的情况下，也能用简单的代码实现三维场景的渲染写出在浏览器上流畅运行的3D程序。
7. Three.js的源目录结果:
	* Build目录：包含两个文件，three.js 和three.min.js 。这是three.js最终被引用的文件。一个已经压缩，一个没有压缩的js文件。Docs目录：这里是three.js的帮助文档，里面是各个函数的api，可惜并没有详细的解释。试图用这些文档来学会three.js是不可能的。
	* Editor目录：一个类似3D-max的简单编辑程序，它能创建一些三维物体。
	* Examples目录：一些很有趣的例子demo，可惜没有文档介绍。对图像学理解不深入的同学，学习成本非常高。
	* Src目录：源代码目录，里面是所有源代码。
	* Test目录：一些测试代码，基本没用。
	* Utils目录：存放一些脚本，python文件的工具目录。例如将3D-Max格式的模型转换为three.js特有的json模型。
	* .gitignore文件：git工具的过滤规则文件，没有用。
	* CONTRIBUTING.md文件：一个怎么报bug，怎么获得帮助的说明文档。
	* LICENSE文件：版权信息。
	* README.md文件：介绍three.js的一个文件，里面还包含了各个版本的更新内容列表。
8. Three.js引擎怎么嵌入网页中，让它运行起来呢？很简单，只要html文件中引入three.js文件就可以了。THREE是一个three.js对象，可以狭隘的理解为three.js引擎的抽象。它代表着three.js引擎本身，其中包含引擎的很多常用属性和方法。例如 THREE.REVISION就是代码引擎的版本。
9. 在Three.js中，要渲染物体到网页中，我们需要3个组建：场景（scene）、相机（camera）和渲染器（renderer）。有了这三样东西，才能将物体渲染到网页中去。创建这三要素的代码如下：
```
var scene = new THREE.Scene();  // 场景
var camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);// 透视相机
var renderer = new THREE.WebGLRenderer();   // 渲染器
renderer.setSize(window.innerWidth, window.innerHeight);    // 设置渲染器的大小为窗口的内宽度，也就是内容区的宽度
document.body.appendChild(renderer.domElement);
``` 
	* 场景是所有物体的容器，在应用时，添加的物体都是添加到场景中。在Threejs中场景就只有一种，用THREE.Scene来表示，要构件一个场景也很简单，只要new一个对象就可以了`var scene = new THREE.Scene();`
	* 相机决定了场景中那个角度的景色会显示出来。相机也是需要添加到场景中的。（注：坐标系为右手坐标系）
	* 渲染器决定了渲染的结果应该画在页面的什么元素上面，并且以怎样的方式来绘制。注意，渲染器renderer的domElement元素，表示渲染器中的画布，所有的渲染都是画在domElement上的，所以这里的appendChild表示将这个domElement挂接在body下面，这样渲染的结果就能够在页面中显示了。
10. 物体
	* 点：在三维空间中的某一个点可以用一个坐标点来表示。一个坐标点由x,y,z三个分量构成。用`THREE.Vector3D`表示。现在来看看怎么定义个点，假设有一个点x=4，y=8，z=9。你可以这样定义它：
	
		```
		var point1 = new THREE.Vecotr3(4,8,9);
		
		// 另外你也可以使用set方法，代码如下：
		
		var point1 = new THREE.Vector3();
		point1.set(4,8,9);
		```
	* 线：也可以通过定义两个不重合的点，来画一条直线。


